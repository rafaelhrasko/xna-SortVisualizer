/*
* To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author fredrischter
 */
using System;
using System.Collections.Generic;
public class MainTesteDeOrdenacao : OrdenacaoListener<Randomizavel>
{

    // Formulário utilizado para apresentar a ordenação.
    FormularioTesteDeOrdenacao form;

    public MainTesteDeOrdenacao() {

        // Construindo a janela.
        //form=new FormularioTesteDeOrdenacao(this);
        //form.setVisible(true);

        // Redirecionando a saída padrão.
        //System.setOut(new PrintStream(new OutputStream() {
        //    @Override
        //    public void write(int b) throws IOException {
        //        form.write(b);
        //    }
        //}));

        // Cria um novo instância para começar a usar, com 10 elementos.
        //novoTeste(10);

    }

    // Método principal
    public static void main(String []st) {

        new MainTesteDeOrdenacao();
        
    }

    // O tratamento ainda não está implementado!!
    // Obs: as mensagens que aparecem são por causa de outra classe que também trata esses eventos.
    // além desta classe que lança as mensagens, esta também recebe os eventos,
    // é possível colocar quantos "Listeners" quiser.
    // Para desabilitar a saída de texto padrão é só comentar o System.out.println na classe Util.

    override public void receberConjuntoInicial(Conjunto<Randomizavel> c)
    {
        // O que será feito quando o conjunto inicial for recebido?
    }

    override public void receberConjuntoFinal(Conjunto<Randomizavel> c)
    {
        // O que será feito quando o conjunto final for recebido?
        // Obs: este conjunto estará ordenado supostamente!! Claro, se o algortmo realmente ordenou.
    }

    override public void receberTrocaPara(Conjunto<Randomizavel> c, Troca<Randomizavel> troc)
    {
        // O que será feito quando uma troca for efetuada?
    }

    override public void receberDefinicao(Conjunto<Randomizavel> c, Definicao<Randomizavel> definicao)
    {
        // O que será feito quando for definido um elemento no conjunto
        // Isso ocorre quando o algoritmo setar um elemento em uma determinada posição,
        // sem que isso seja uma "troca" de fato, simplesmente uma posição foi definida com um valor.
    }

    override public void receberPivos(List<Pivo> pivos)
    {
        // Recebe os pivos quando for incluido ou excluído algum
    }

    override public void receberAlteracaoContador(Contador<Randomizavel> cont)
    {
    }

    override public void receberContadores(List<Contador<Randomizavel>> contadores)
    {
    }

    // Para fazer uma ordenação, é necessário instanciar um teste de ordenação.
    TesteDeOrdenacao test = null;

    // Cria um novo teste com uma quantidade de elementos
    public void novoTeste(int val) {

        // Se já existe um teste, este será finalizado.
        if (test!=null)
            test.finalizar();

        // Cria instancia do teste de ordenação (pode-se criar quantas quiser)
        // O teste será do algoritmo QuickSort com 10 elementos.
        test=new TesteDeOrdenacao(new ShakerSort<Randomizavel>(),val);

        // Adiciona um "Listener" para receber os eventos, o tratamento é implementado aqui mesmo
        // Com esta adição, esta classe passará a ser chamada quando os eventos ocorrerem.
        test.addTrocaListener(this);
    }

    public void play() {
        // Dispara a ordenação, com pausa de 500 milisegundos.
        test.disparar(500);
    }

    void stop() {
        // Para o teste.
        test.parar();
    }

    void step() {
        // Executa um passo no teste.
        test.passo();
    }


}


